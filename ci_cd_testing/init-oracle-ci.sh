#!/bin/bash

# Oracle CI/CD Initialization Script
# Sets up Oracle Database testing infrastructure with GitHub Actions
# Best practices implementation for Oracle database CI/CD

set -euo pipefail

# Script configuration
SCRIPT_NAME="init-oracle-ci.sh"
VERSION="2.0.0"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(git rev-parse --show-toplevel 2>/dev/null || pwd)"

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_debug() {
    if [[ "${DEBUG:-false}" == "true" ]]; then
        echo -e "${PURPLE}[DEBUG]${NC} $1"
    fi
}

# Error handling
handle_error() {
    local exit_code=$?
    local line_number=$1
    log_error "Error occurred on line $line_number (exit code: $exit_code)"
    exit $exit_code
}

trap 'handle_error $LINENO' ERR

# Help system
show_help() {
    cat << EOF
ðŸ”§ Oracle CI/CD Initialization Script v${VERSION}
===============================================

Usage: $SCRIPT_NAME [options] [template]

Templates:
  basic           Basic Oracle testing setup (default)
  advanced        Advanced setup with multiple Oracle versions
  security        Security-focused setup with comprehensive scanning
  performance     Performance testing setup with monitoring
  enterprise      Enterprise-grade setup with full compliance

Options:
  --verbose, -v   Verbose output
  --debug, -d     Debug mode
  --dry-run, -n   Show what would be created without making changes
  --force, -f      Overwrite existing files
  --help, -h      Show this help

Examples:
  $SCRIPT_NAME                    # Basic setup
  $SCRIPT_NAME advanced           # Advanced setup
  $SCRIPT_NAME --dry-run security # Preview security setup
  $SCRIPT_NAME --force enterprise # Force enterprise setup

EOF
}

# Validate prerequisites
validate_prerequisites() {
    log_info "Validating prerequisites..."
    
    # Check if we're in a git repository
    if [[ ! -d ".git" ]]; then
        log_warning "Not in a git repository. Initializing git..."
        git init
    fi
    
    # Check for required commands
    local missing_deps=()
    command -v git >/dev/null 2>&1 || missing_deps+=("git")
    command -v find >/dev/null 2>&1 || missing_deps+=("find")
    command -v mkdir >/dev/null 2>&1 || missing_deps+=("mkdir")
    
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log_error "Missing required dependencies: ${missing_deps[*]}"
        exit 1
    fi
    
    log_success "Prerequisites validated"
}

# Create directory structure
create_directory_structure() {
    local template="$1"
    
    log_info "Creating directory structure for $template template..."
    
    # Base directories
    local dirs=(
        "sql/setup"
        "sql/tests"
        "sql/cleanup"
        ".github/workflows"
        "docs/oracle"
        "config/oracle"
    )
    
    # Template-specific directories
    case "$template" in
        "advanced"|"enterprise")
            dirs+=(
                "sql/migrations"
                "sql/fixtures"
                "tests/integration"
                "tests/performance"
                "monitoring"
            )
            ;;
        "security")
            dirs+=(
                "security/scanning"
                "security/policies"
                "compliance"
            )
            ;;
        "performance")
            dirs+=(
                "performance/benchmarks"
                "performance/monitoring"
                "reports"
            )
            ;;
    esac
    
    for dir in "${dirs[@]}"; do
        if [[ ! -d "$dir" ]]; then
            mkdir -p "$dir"
            log_debug "Created directory: $dir"
        else
            log_debug "Directory already exists: $dir"
        fi
    done
    
    log_success "Directory structure created"
}

# Create SQL templates
create_sql_templates() {
    local template="$1"
    
    log_info "Creating SQL templates for $template template..."
    
    # Basic setup script
    cat > sql/setup/01_schema_setup.sql << 'EOF'
-- Oracle Database Schema Setup
-- This script creates the basic database schema for testing

-- Create users table
CREATE TABLE users (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR2(50) NOT NULL UNIQUE,
    email VARCHAR2(100) NOT NULL UNIQUE,
    first_name VARCHAR2(50),
    last_name VARCHAR2(50),
    is_active CHAR(1) DEFAULT 'Y' CHECK (is_active IN ('Y', 'N')),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create orders table
CREATE TABLE orders (
    id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id NUMBER NOT NULL,
    order_number VARCHAR2(20) NOT NULL UNIQUE,
    total_amount NUMBER(10,2) NOT NULL CHECK (total_amount >= 0),
    status VARCHAR2(20) DEFAULT 'PENDING' CHECK (status IN ('PENDING', 'PROCESSING', 'SHIPPED', 'DELIVERED', 'CANCELLED')),
    order_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    CONSTRAINT fk_orders_user FOREIGN KEY (user_id) REFERENCES users(id)
);

-- Create indexes for performance
CREATE INDEX idx_orders_user_id ON orders(user_id);
CREATE INDEX idx_orders_status ON orders(status);
CREATE INDEX idx_orders_date ON orders(order_date);

-- Create audit trigger for updated_at
CREATE OR REPLACE TRIGGER tr_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/

CREATE OR REPLACE TRIGGER tr_orders_updated_at
    BEFORE UPDATE ON orders
    FOR EACH ROW
BEGIN
    :NEW.updated_at := CURRENT_TIMESTAMP;
END;
/
EOF

    # Test data insertion
    cat > sql/setup/02_test_data.sql << 'EOF'
-- Insert test data for Oracle database testing
-- This script populates the database with sample data

-- Insert test users
INSERT INTO users (username, email, first_name, last_name) VALUES 
('john.doe', 'john.doe@example.com', 'John', 'Doe'),
('jane.smith', 'jane.smith@example.com', 'Jane', 'Smith'),
('bob.wilson', 'bob.wilson@example.com', 'Bob', 'Wilson'),
('alice.brown', 'alice.brown@example.com', 'Alice', 'Brown'),
('charlie.davis', 'charlie.davis@example.com', 'Charlie', 'Davis');

-- Insert test orders
INSERT INTO orders (user_id, order_number, total_amount, status) VALUES 
(1, 'ORD-001', 99.99, 'DELIVERED'),
(1, 'ORD-002', 149.50, 'SHIPPED'),
(2, 'ORD-003', 75.25, 'PROCESSING'),
(2, 'ORD-004', 200.00, 'PENDING'),
(3, 'ORD-005', 50.00, 'DELIVERED'),
(4, 'ORD-006', 300.75, 'SHIPPED'),
(5, 'ORD-007', 125.00, 'CANCELLED');

COMMIT;
EOF

    # Basic test scripts
    cat > sql/tests/01_basic_queries.sql << 'EOF'
-- Basic query tests for Oracle database
-- These tests verify fundamental database operations

-- Test 1: User count verification
SELECT 'User Count Test' as test_name, COUNT(*) as result FROM users;
SELECT 'Expected: 5' as expectation, 'PASS' as status FROM DUAL WHERE (SELECT COUNT(*) FROM users) = 5;

-- Test 2: Order count verification
SELECT 'Order Count Test' as test_name, COUNT(*) as result FROM orders;
SELECT 'Expected: 7' as expectation, 'PASS' as status FROM DUAL WHERE (SELECT COUNT(*) FROM orders) = 7;

-- Test 3: Foreign key relationship test
SELECT 'FK Relationship Test' as test_name, COUNT(*) as result 
FROM users u 
JOIN orders o ON u.id = o.user_id;
SELECT 'Expected: 7' as expectation, 'PASS' as status FROM DUAL 
WHERE (SELECT COUNT(*) FROM users u JOIN orders o ON u.id = o.user_id) = 7;

-- Test 4: Aggregation test
SELECT 'Total Sales Test' as test_name, SUM(total_amount) as result FROM orders;
SELECT 'Expected: 1000.49' as expectation, 'PASS' as status FROM DUAL 
WHERE (SELECT SUM(total_amount) FROM orders) = 1000.49;

-- Test 5: Status distribution test
SELECT 'Status Distribution' as test_name, status, COUNT(*) as count 
FROM orders 
GROUP BY status 
ORDER BY status;
EOF

    # Advanced test scripts for advanced/enterprise templates
    if [[ "$template" == "advanced" || "$template" == "enterprise" ]]; then
        cat > sql/tests/02_advanced_queries.sql << 'EOF'
-- Advanced query tests for Oracle database
-- These tests verify complex database operations and performance

-- Test 1: Complex joins and aggregations
SELECT 'Complex Join Test' as test_name, 
       u.username, 
       COUNT(o.id) as order_count,
       SUM(o.total_amount) as total_spent,
       AVG(o.total_amount) as avg_order_value
FROM users u 
LEFT JOIN orders o ON u.id = o.user_id 
GROUP BY u.id, u.username
ORDER BY total_spent DESC;

-- Test 2: Window functions test
SELECT 'Window Function Test' as test_name,
       username,
       total_amount,
       ROW_NUMBER() OVER (PARTITION BY user_id ORDER BY order_date) as order_sequence,
       RANK() OVER (ORDER BY total_amount DESC) as amount_rank
FROM users u
JOIN orders o ON u.id = o.user_id
ORDER BY user_id, order_date;

-- Test 3: Subquery and EXISTS test
SELECT 'Subquery Test' as test_name, username, email
FROM users u
WHERE EXISTS (
    SELECT 1 FROM orders o 
    WHERE o.user_id = u.id 
    AND o.total_amount > 100
);

-- Test 4: Date function test
SELECT 'Date Function Test' as test_name,
       COUNT(*) as orders_today,
       COUNT(CASE WHEN order_date >= TRUNC(SYSDATE) THEN 1 END) as today_orders
FROM orders;
EOF
    fi

    # Cleanup script
    cat > sql/cleanup/01_cleanup_all.sql << 'EOF'
-- Cleanup script for Oracle database testing
-- This script removes all test data and objects

-- Disable foreign key constraints temporarily
ALTER TABLE orders DISABLE CONSTRAINT fk_orders_user;

-- Drop tables in correct order
DROP TABLE orders CASCADE CONSTRAINTS;
DROP TABLE users CASCADE CONSTRAINTS;

-- Drop triggers
DROP TRIGGER tr_users_updated_at;
DROP TRIGGER tr_orders_updated_at;

-- Purge recyclebin to ensure complete cleanup
PURGE RECYCLEBIN;

-- Show cleanup completion
SELECT 'Cleanup completed successfully' as status FROM DUAL;
EOF

    log_success "SQL templates created for $template template"
}

# Create GitHub Actions workflows
create_workflows() {
    local template="$1"
    
    log_info "Creating GitHub Actions workflows for $template template..."
    
    # Basic workflow
    cat > .github/workflows/oracle-ci.yml << 'EOF'
name: Oracle Database CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  ORACLE_VERSION: 21-slim

jobs:
  test:
    name: Oracle Database Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    strategy:
      matrix:
        oracle-version: [21-slim, 23-slim]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test with Oracle Database
        uses: scriptautomation123/oracledb-action@main
        with:
          oracle-version: ${{ matrix.oracle-version }}
          setup-scripts: sql/setup/*.sql
          test-scripts: sql/tests/*.sql
          cleanup-scripts: sql/cleanup/*.sql
          oracle-password: ${{ secrets.ORACLE_PASSWORD || 'OraclePassword123' }}
          wait-timeout: 300
          run-checkov: true
          fail-on-checkov: false
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: oracle-test-results-${{ matrix.oracle-version }}
          path: |
            oracle-test-results/
            oracle-logs/
EOF

    # Template-specific workflows
    case "$template" in
        "advanced"|"enterprise")
            cat > .github/workflows/oracle-advanced.yml << 'EOF'
name: Advanced Oracle Database Tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM

jobs:
  test-matrix:
    name: Multi-Version Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    strategy:
      matrix:
        oracle-version: [19-slim, 21-slim, 23-slim]
        test-type: [basic, integration, performance]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Test with Oracle Database
        uses: scriptautomation123/oracledb-action@main
        with:
          oracle-version: ${{ matrix.oracle-version }}
          setup-scripts: |
            sql/setup/*.sql
            sql/migrations/*.sql
          test-scripts: |
            sql/tests/*.sql
            tests/${{ matrix.test-type }}/*.sql
          cleanup-scripts: sql/cleanup/*.sql
          sqlplus-commands: |
            SELECT 'Database Status: ' || STATUS FROM V$INSTANCE;
            SELECT COUNT(*) as "Total Tables" FROM USER_TABLES;
            EXEC DBMS_STATS.GATHER_SCHEMA_STATS(USER);
          oracle-password: ${{ secrets.ORACLE_PASSWORD }}
          wait-timeout: 600
          run-checkov: true
          checkov-framework: dockerfile,secrets,yaml
          fail-on-checkov: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Security Scan
        uses: scriptautomation123/oracledb-action@main
        with:
          oracle-version: 21-slim
          test-scripts: sql/tests/*.sql
          run-checkov: true
          fail-on-checkov: true
          checkov-framework: all
EOF
            ;;
        "security")
            cat > .github/workflows/oracle-security.yml << 'EOF'
name: Oracle Security & Compliance

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 1 * * *'  # Daily at 1 AM

jobs:
  security-scan:
    name: Security & Compliance Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Comprehensive Security Scan
        uses: scriptautomation123/oracledb-action@main
        with:
          oracle-version: 21-slim
          test-scripts: sql/tests/*.sql
          run-checkov: true
          fail-on-checkov: true
          checkov-framework: all
          oracle-password: ${{ secrets.ORACLE_PASSWORD }}
          wait-timeout: 300
          
      - name: Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            security-reports/
            compliance-reports/
EOF
            ;;
        "performance")
            cat > .github/workflows/oracle-performance.yml << 'EOF'
name: Oracle Performance Testing

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 3 * * 0'  # Weekly on Sunday at 3 AM

jobs:
  performance-test:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Performance Testing
        uses: scriptautomation123/oracledb-action@main
        with:
          oracle-version: 23-slim
          setup-scripts: sql/setup/*.sql
          test-scripts: |
            sql/tests/*.sql
            performance/benchmarks/*.sql
          sqlplus-commands: |
            EXEC DBMS_STATS.GATHER_SCHEMA_STATS(USER);
            SELECT 'Performance test started' FROM DUAL;
            -- Performance monitoring queries
            SELECT 'Active Sessions: ' || COUNT(*) FROM V$SESSION WHERE STATUS = 'ACTIVE';
            SELECT 'Database Size: ' || ROUND(SUM(bytes)/1024/1024, 2) || ' MB' FROM DBA_DATA_FILES;
          oracle-password: ${{ secrets.ORACLE_PASSWORD }}
          wait-timeout: 900
          
      - name: Upload performance report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: |
            performance-reports/
            benchmark-results/
EOF
            ;;
    esac

    log_success "GitHub Actions workflows created for $template template"
}

# Create configuration files
create_configurations() {
    local template="$1"
    
    log_info "Creating configuration files for $template template..."
    
    # Main configuration file
    cat > config/oracle/database.yml << 'EOF'
# Oracle Database Configuration
# This file contains database connection and testing configuration

database:
  # Connection settings
  host: localhost
  port: 1521
  service_name: XE
  username: system
  password: ${ORACLE_PASSWORD:-OraclePassword123}
  
  # Connection pool settings
  pool:
    min_connections: 2
    max_connections: 10
    timeout: 30
  
  # Testing settings
  testing:
    timeout: 300
    retry_attempts: 3
    cleanup_after_test: true
    
  # Security settings
  security:
    enable_audit: true
    encrypt_connections: true
    require_ssl: false

# Oracle versions to test
oracle_versions:
  - 19-slim
  - 21-slim
  - 23-slim

# Test categories
test_categories:
  - basic
  - integration
  - performance
  - security
EOF

    # Template-specific configurations
    case "$template" in
        "security")
            cat > config/oracle/security.yml << 'EOF'
# Oracle Security Configuration
# Security and compliance settings for Oracle database testing

security:
  # Checkov configuration
  checkov:
    enabled: true
    frameworks:
      - dockerfile
      - secrets
      - yaml
      - kubernetes
    fail_on_violation: true
    severity_threshold: MEDIUM
    
  # Compliance settings
  compliance:
    pci_dss: true
    sox: true
    gdpr: true
    
  # Security scanning
  scanning:
    sql_injection: true
    privilege_escalation: true
    data_encryption: true
    access_control: true
EOF
            ;;
        "performance")
            cat > config/oracle/performance.yml << 'EOF'
# Oracle Performance Configuration
# Performance testing and monitoring settings

performance:
  # Benchmark settings
  benchmarks:
    enabled: true
    duration: 300  # seconds
    concurrent_users: 10
    test_data_size: 10000
    
  # Monitoring settings
  monitoring:
    cpu_usage: true
    memory_usage: true
    disk_io: true
    network_io: true
    query_performance: true
    
  # Performance thresholds
  thresholds:
    max_query_time: 5.0  # seconds
    max_cpu_usage: 80    # percentage
    max_memory_usage: 85 # percentage
    min_throughput: 100  # queries per second
EOF
            ;;
    esac

    log_success "Configuration files created for $template template"
}

# Create documentation
create_documentation() {
    local template="$1"
    
    log_info "Creating documentation for $template template..."
    
    # Main README
    cat > docs/oracle/README.md << 'EOF'
# Oracle Database CI/CD Documentation

This directory contains the Oracle Database testing infrastructure for CI/CD pipelines.

## Quick Start

1. **Initialize Oracle CI/CD**:
   ```bash
   ./scripts/init-oracle-ci.sh
   ```

2. **Customize Configuration**:
   - Edit `config/oracle/database.yml` for database settings
   - Modify SQL scripts in `sql/` directory
   - Update GitHub Actions workflows in `.github/workflows/`

3. **Run Tests**:
   ```bash
   git add .
   git commit -m "Add Oracle database testing"
   git push
   ```

## Directory Structure

```
â”œâ”€â”€ sql/
â”‚   â”œâ”€â”€ setup/          # Database setup scripts
â”‚   â”œâ”€â”€ tests/          # Test scripts
â”‚   â”œâ”€â”€ cleanup/        # Cleanup scripts
â”‚   â””â”€â”€ migrations/     # Database migrations (advanced templates)
â”œâ”€â”€ .github/workflows/  # GitHub Actions workflows
â”œâ”€â”€ config/oracle/      # Configuration files
â”œâ”€â”€ docs/oracle/        # Documentation
â””â”€â”€ tests/              # Additional test files
```

## Available Templates

- **basic**: Simple Oracle testing setup
- **advanced**: Multi-version testing with comprehensive workflows
- **security**: Security-focused setup with compliance scanning
- **performance**: Performance testing with monitoring
- **enterprise**: Enterprise-grade setup with full compliance

## Configuration

### Database Settings
Edit `config/oracle/database.yml` to configure:
- Database connection parameters
- Connection pool settings
- Testing timeouts
- Security settings

### Oracle Versions
Supported Oracle versions:
- `19-slim` (LTS)
- `21-slim` (Recommended)
- `23-slim` (Latest)

### Security Settings
For security-focused templates:
- Checkov integration
- Compliance frameworks
- Security scanning
- Audit logging

## Troubleshooting

### Common Issues

1. **Database Connection Timeout**:
   - Increase `wait-timeout` in workflow files
   - Check Oracle password in secrets

2. **Security Scan Failures**:
   - Review `fail-on-checkov` setting
   - Update security policies

3. **Performance Issues**:
   - Adjust connection pool settings
   - Optimize SQL queries
   - Review resource limits

### Debug Mode

Enable debug mode for detailed logging:
```bash
DEBUG=true ./scripts/init-oracle-ci.sh
```

## Support

For issues and questions:
- Check the GitHub Actions logs
- Review Oracle Database documentation
- Consult the oracledb-action repository
EOF

    # Template-specific documentation
    case "$template" in
        "advanced"|"enterprise")
            cat > docs/oracle/ADVANCED.md << 'EOF'
# Advanced Oracle CI/CD Setup

This document describes the advanced Oracle CI/CD setup with multi-version testing and comprehensive workflows.

## Features

- Multi-version Oracle testing (19, 21, 23)
- Integration and performance testing
- Security scanning and compliance
- Automated reporting and monitoring

## Workflows

### Multi-Version Testing
Tests against multiple Oracle versions to ensure compatibility.

### Integration Testing
Comprehensive testing of database operations and business logic.

### Performance Testing
Benchmarking and performance monitoring.

## Configuration

See `config/oracle/` for detailed configuration options.
EOF
            ;;
        "security")
            cat > docs/oracle/SECURITY.md << 'EOF'
# Oracle Security CI/CD

This document describes the security-focused Oracle CI/CD setup.

## Security Features

- Comprehensive security scanning
- Compliance framework integration
- Automated vulnerability detection
- Security policy enforcement

## Compliance

- PCI DSS compliance
- SOX compliance
- GDPR compliance
- Industry best practices

## Security Scanning

- SQL injection detection
- Privilege escalation checks
- Data encryption validation
- Access control verification
EOF
            ;;
    esac

    log_success "Documentation created for $template template"
}

# Main execution
main() {
    local template="${1:-basic}"
    local dry_run=false
    local force=false
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --verbose|-v)
                export DEBUG=true
                shift
                ;;
            --debug|-d)
                export DEBUG=true
                shift
                ;;
            --dry-run|-n)
                dry_run=true
                shift
                ;;
            --force|-f)
                force=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            --version)
                echo "$SCRIPT_NAME v$VERSION"
                exit 0
                ;;
            -*)
                log_error "Unknown option: $1"
                show_help
                exit 1
                ;;
            *)
                template="$1"
                shift
                ;;
        esac
    done
    
    # Validate template
    case "$template" in
        "basic"|"advanced"|"security"|"performance"|"enterprise")
            ;;
        *)
            log_error "Invalid template: $template"
            log_info "Available templates: basic, advanced, security, performance, enterprise"
            exit 1
            ;;
    esac
    
    # Show header
    log_info "ðŸ”§ Oracle CI/CD Initialization Script v$VERSION"
    log_info "==============================================="
    log_info "Template: $template"
    log_info "Dry run: $dry_run"
    log_info "Force: $force"
    echo ""
    
    if [[ "$dry_run" == "true" ]]; then
        log_info "DRY RUN MODE - No changes will be made"
        echo ""
    fi
    
    # Validate prerequisites
    validate_prerequisites
    
    # Create directory structure
    if [[ "$dry_run" == "false" ]]; then
        create_directory_structure "$template"
        create_sql_templates "$template"
        create_workflows "$template"
        create_configurations "$template"
        create_documentation "$template"
    else
        log_info "Would create directory structure for $template template"
        log_info "Would create SQL templates for $template template"
        log_info "Would create GitHub Actions workflows for $template template"
        log_info "Would create configuration files for $template template"
        log_info "Would create documentation for $template template"
    fi
    
    # Show completion message
    echo ""
    log_success "ðŸŽ‰ Oracle CI/CD setup completed!"
    log_info "Template: $template"
    log_info "Version: $VERSION"
    
    if [[ "$dry_run" == "false" ]]; then
        echo ""
        log_info "Next steps:"
        echo "  1. Review and customize the generated files"
        echo "  2. Set up Oracle password in GitHub Secrets"
        echo "  3. Commit your changes: git add . && git commit -m 'Add Oracle CI/CD'"
        echo "  4. Push to trigger the workflow: git push"
        echo "  5. Check the Actions tab in your GitHub repository"
        
        echo ""
        log_warning "Important:"
        echo "  - Update Oracle password in GitHub Secrets"
        echo "  - Customize SQL scripts for your specific needs"
        echo "  - Review security settings and compliance requirements"
    else
        echo ""
        log_info "Run without --dry-run to create the actual files"
    fi
}

# Run main function
main "$@"
