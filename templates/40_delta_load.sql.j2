{#
==================================================================
Template: Delta Load (Jinja2)
==================================================================
Purpose: Load incremental changes since initial load
==================================================================
#}
-- ==================================================================
-- DELTA LOAD: {{ owner }}.{{ new_table_name }}
-- ==================================================================
-- Generated: {{ generation_date }}
-- Captures changes since initial load: {{ cutoff_timestamp }}
-- ==================================================================

SET ECHO ON
SET TIMING ON
SET SERVEROUTPUT ON

PROMPT ================================================================
PROMPT Step 40: Delta Load (Incremental Changes)
PROMPT ================================================================
PROMPT Source: {{ owner }}.{{ table_name }}
PROMPT Target: {{ owner }}.{{ new_table_name }}
PROMPT Captures changes since: {{ cutoff_timestamp }}
PROMPT ================================================================

-- Variables for timing and counts
VARIABLE v_start_time VARCHAR2(30)
VARIABLE v_end_time VARCHAR2(30)
VARIABLE v_delta_count NUMBER
VARIABLE v_insert_count NUMBER
VARIABLE v_update_count NUMBER

-- Record start time
BEGIN
    SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') INTO :v_start_time FROM dual;
    DBMS_OUTPUT.PUT_LINE('Delta load started at: ' || :v_start_time);
    DBMS_OUTPUT.PUT_LINE('');
END;
/

-- Count delta rows using safe parameterized query
PROMPT Counting delta rows...
DECLARE
    v_partition_column VARCHAR2(128) := '{{ target_configuration.partition_column }}';
    v_cutoff_timestamp DATE := TO_DATE('{{ cutoff_timestamp }}', 'YYYY-MM-DD HH24:MI:SS');
    v_table_name VARCHAR2(128) := '{{ owner }}.{{ table_name }}';
    v_sql VARCHAR2(4000);
BEGIN
    -- Build safe SQL with proper escaping
    v_sql := 'SELECT COUNT(*) FROM ' || v_table_name || ' WHERE ' || v_partition_column || ' > :1';
    
    DBMS_OUTPUT.PUT_LINE('Executing: ' || v_sql);
    DBMS_OUTPUT.PUT_LINE('Partition column: ' || v_partition_column);
    DBMS_OUTPUT.PUT_LINE('Cutoff timestamp: ' || TO_CHAR(v_cutoff_timestamp, 'YYYY-MM-DD HH24:MI:SS'));
    
    EXECUTE IMMEDIATE v_sql INTO :v_delta_count USING v_cutoff_timestamp;
    
    DBMS_OUTPUT.PUT_LINE('Delta rows to process: ' || TO_CHAR(:v_delta_count, '999,999,999,999'));
    DBMS_OUTPUT.PUT_LINE('');
    
    IF :v_delta_count = 0 THEN
        DBMS_OUTPUT.PUT_LINE('No delta changes found - skipping delta load');
        RETURN;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('ERROR counting delta rows: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('SQL attempted: ' || v_sql);
        RAISE;
END;
/

{% if primary_key_columns and primary_key_columns | length > 0 %}
-- Delta load with MERGE (tables with primary keys)
PROMPT Processing delta changes with MERGE...

MERGE {{ target_configuration.parallel_degree | parallel_hint }} INTO {{ owner }}.{{ new_table_name }} tgt
USING (
    SELECT {{ column_list }}
    FROM {{ owner }}.{{ table_name }}
    WHERE {{ target_configuration.partition_column }} > TO_DATE('{{ cutoff_timestamp }}', 'YYYY-MM-DD HH24:MI:SS')
) src
ON ({{ primary_key_columns | match_condition('tgt', 'src') }})
WHEN MATCHED THEN
    UPDATE SET {{ update_set_clause }}
WHEN NOT MATCHED THEN
    INSERT ({{ column_list }})
    VALUES ({{ column_list | format_column_list('src.') }});

-- Get merge statistics
BEGIN
    :v_insert_count := SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE('Delta load completed: ' || TO_CHAR(:v_insert_count, '999,999,999,999') || ' rows processed');
END;
/

{% else %}
-- Delta load with INSERT (tables without primary keys)
PROMPT Processing delta changes with INSERT (no primary key)...

INSERT {{ target_configuration.parallel_degree | parallel_hint }} INTO {{ owner }}.{{ new_table_name }}
(
    {{ column_list }}
)
SELECT {{ target_configuration.parallel_degree | parallel_hint }}
    {{ column_list }}
FROM {{ owner }}.{{ table_name }}
WHERE {{ target_configuration.partition_column }} > TO_DATE('{{ cutoff_timestamp }}', 'YYYY-MM-DD HH24:MI:SS');

-- Get insert statistics
BEGIN
    :v_insert_count := SQL%ROWCOUNT;
    DBMS_OUTPUT.PUT_LINE('Delta load completed: ' || TO_CHAR(:v_insert_count, '999,999,999,999') || ' rows inserted');
END;
/

{% endif %}

COMMIT;

-- Record end time
BEGIN
    SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') INTO :v_end_time FROM dual;
    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('Delta load finished at: ' || :v_end_time);
END;
/

PROMPT âœ“ Step 40 Complete: Delta load finished
