{#
==================================================================
Template: Swap Tables (Jinja2)
==================================================================
Purpose: Swap old and new tables (rename operation)
==================================================================
#}
-- ==================================================================
-- SWAP TABLES: {{ owner }}.{{ table_name }} <-> {{ owner }}.{{ new_table_name }}
-- ==================================================================
-- Generated: {{ generation_date }}
-- ==================================================================

SET ECHO ON
SET TIMING ON
SET SERVEROUTPUT ON

PROMPT ================================================================
PROMPT Step 50: Swapping Tables
PROMPT ================================================================
PROMPT Old table: {{ owner }}.{{ table_name }}
PROMPT New table: {{ owner }}.{{ new_table_name }}
PROMPT Backup: {{ owner }}.{{ old_table_name }}
PROMPT ================================================================

-- Table swap with manual rollback capability
DECLARE
    v_swap_success BOOLEAN := FALSE;
    v_error_message VARCHAR2(4000);
    v_constraint_check_required BOOLEAN := {{ migration_settings.constraint_validation | default(true) }};
    v_auto_enable_constraints BOOLEAN := {{ migration_settings.auto_enable_constraints | default(true) }};
    v_disabled_constraints NUMBER := 0;
    v_enabled_constraints NUMBER := 0;
BEGIN
    -- Perform comprehensive table swap validation
    DBMS_OUTPUT.PUT_LINE('Performing table swap validation...');
    @validation/table_swap_validation.sql {{ owner }} {{ table_name }} {{ new_table_name }} {{ old_table_name }}
    
    -- Handle constraint validation and auto-enable if configured
    IF v_constraint_check_required THEN
        BEGIN
            @validation/swap_constraint_validation.sql {{ owner }} {{ table_name }} {{ v_auto_enable_constraints }}
        EXCEPTION
            WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('Constraint validation failed: ' || SQLERRM);
                RAISE_APPLICATION_ERROR(-20004, 'Constraint validation failed: ' || SQLERRM);
        END;
    END IF;
    
    -- Begin table swap (each DDL is independently committed)
    DBMS_OUTPUT.PUT_LINE('Starting table swap...');
    DBMS_OUTPUT.PUT_LINE('NOTE: Each DDL operation is immediately committed in Oracle');
    
    -- Step 1: Rename original table to _OLD
    -- NOTE: This DDL is immediately committed - cannot be rolled back
    BEGIN
        EXECUTE IMMEDIATE 'ALTER TABLE {{ owner }}.{{ table_name }} RENAME TO {{ old_table_name }}';
        DBMS_OUTPUT.PUT_LINE('✓ Renamed {{ table_name }} to {{ old_table_name }}');
        DBMS_OUTPUT.PUT_LINE('  (This operation is committed and cannot be rolled back)');
    EXCEPTION
        WHEN OTHERS THEN
            v_error_message := 'Failed to rename original table: ' || SQLERRM;
            RAISE_APPLICATION_ERROR(-20002, v_error_message);
    END;
    
    -- Step 2: Rename new table to original name
    -- NOTE: This DDL is immediately committed - cannot be rolled back
    BEGIN
        EXECUTE IMMEDIATE 'ALTER TABLE {{ owner }}.{{ new_table_name }} RENAME TO {{ table_name }}';
        DBMS_OUTPUT.PUT_LINE('✓ Renamed {{ new_table_name }} to {{ table_name }}');
        DBMS_OUTPUT.PUT_LINE('  (This operation is committed and cannot be rolled back)');
        v_swap_success := TRUE;
    EXCEPTION
        WHEN OTHERS THEN
            -- Manual rollback: Try to rename _OLD back to original
            -- This is NOT a transaction rollback - it's a compensatory DDL operation
            v_error_message := 'Failed to rename new table: ' || SQLERRM;
            DBMS_OUTPUT.PUT_LINE('ERROR: ' || v_error_message);
            DBMS_OUTPUT.PUT_LINE('Attempting manual rollback (compensatory DDL)...');
            DBMS_OUTPUT.PUT_LINE('NOTE: This is not a transaction rollback - each DDL is independently committed');
            
            BEGIN
                EXECUTE IMMEDIATE 'ALTER TABLE {{ owner }}.{{ old_table_name }} RENAME TO {{ table_name }}';
                DBMS_OUTPUT.PUT_LINE('✓ Manual rollback successful: {{ old_table_name }} renamed back to {{ table_name }}');
                DBMS_OUTPUT.PUT_LINE('  (This compensatory operation is also immediately committed)');
            EXCEPTION
                WHEN OTHERS THEN
                DBMS_OUTPUT.PUT_LINE('CRITICAL: Manual rollback failed! Manual intervention required.');
                DBMS_OUTPUT.PUT_LINE('Current state:');
                DBMS_OUTPUT.PUT_LINE('  Original table is now: {{ owner }}.{{ old_table_name }}');
                DBMS_OUTPUT.PUT_LINE('  New table is still: {{ owner }}.{{ new_table_name }}');
                DBMS_OUTPUT.PUT_LINE('  Target table name is unavailable');
            END;
            
            RAISE_APPLICATION_ERROR(-20003, v_error_message);
    END;
    
    -- Verify swap was successful
    IF v_swap_success THEN
        DBMS_OUTPUT.PUT_LINE('✓ Table swap completed successfully');
        
        -- Perform post-swap validation
        DBMS_OUTPUT.PUT_LINE('Performing post-swap validation...');
        @validation/post_swap_validation.sql {{ owner }} {{ table_name }} {{ old_table_name }}
    END IF;
    
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('FATAL ERROR in table swap: ' || SQLERRM);
        DBMS_OUTPUT.PUT_LINE('Performing rollback validation...');
        @validation/rollback_validation.sql {{ owner }} {{ table_name }} {{ old_table_name }} {{ new_table_name }}
        RAISE;
END;
/

-- Verify final state
PROMPT Verifying table swap...
@validation/verify_table_states.sql {{ owner }} {{ table_name }} {{ old_table_name }}

PROMPT ✓ Step 50 Complete: Tables swapped successfully
