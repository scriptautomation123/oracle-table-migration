{#
==================================================================
Template: Initial Data Load (Jinja2)
==================================================================
Purpose: Load data from original table to new partitioned table
         with progress monitoring and validation

Context Variables:
  owner                    - Table owner/schema
  table_name              - Original table name
  new_table_name          - New table name
  column_list             - Comma-separated column list
  target_configuration    - Target config dict
    - partition_column    - Partition key for ordering
    - parallel_degree     - Parallel degree for load
  current_state          - Current table state
    - row_count          - Source row count estimate
    - size_gb            - Table size for time estimation
==================================================================
#}
-- ==================================================================
-- DATA LOAD: {{ owner }}.{{ table_name }} -> {{ owner }}.{{ new_table_name }}
-- ==================================================================
-- Generated: {{ generation_date }}
-- Estimated rows: {{ current_state.row_count | format_row_count }}
-- Estimated size: {{ current_state.size_gb | format_size_gb }}
-- Estimated time: {{ current_state.size_gb | estimate_time('load') }}
-- Parallel degree: {{ target_configuration.parallel_degree }}
-- ==================================================================

SET ECHO ON
SET SERVEROUTPUT ON
SET TIMING ON
SET FEEDBACK ON
SET VERIFY OFF

PROMPT ================================================================
PROMPT Step 20: Initial Data Load
PROMPT ================================================================
PROMPT Source: {{ owner }}.{{ table_name }}
PROMPT Target: {{ owner }}.{{ new_table_name }}
PROMPT Method: Parallel INSERT /*+ APPEND */
PROMPT Parallel Degree: {{ target_configuration.parallel_degree }}
PROMPT Estimated Time: {{ current_state.size_gb | estimate_time('load') }}
PROMPT ================================================================

-- Variables for timing and counts
VARIABLE v_start_time VARCHAR2(30)
VARIABLE v_end_time VARCHAR2(30)
VARIABLE v_source_count NUMBER
VARIABLE v_target_count NUMBER
VARIABLE v_batch_size NUMBER

-- Record start time
BEGIN
    SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') INTO :v_start_time FROM dual;
    DBMS_OUTPUT.PUT_LINE('');
    DBMS_OUTPUT.PUT_LINE('Data load started at: ' || :v_start_time);
    DBMS_OUTPUT.PUT_LINE('');
END;
/

-- Get source row count using generic validation
@validation/count_table_rows.sql {{ owner }} {{ table_name }} {{ current_state.row_count if current_state.row_count > 0 else '' }}

-- Verify target table is empty using generic validation
@validation/count_table_rows.sql {{ owner }} {{ new_table_name }} 0

-- Disable constraints on target (performance optimization)
@validation/disable_constraints.sql {{ owner }} {{ new_table_name }}

-- Enable parallel DML
ALTER SESSION ENABLE PARALLEL DML;
ALTER SESSION SET PARALLEL_DEGREE_POLICY = MANUAL;

PROMPT
PROMPT ================================================================
PROMPT Starting Data Load...
PROMPT ================================================================
PROMPT This may take {{ current_state.size_gb | estimate_time('load') }} depending on system load
PROMPT Progress will be shown after completion
PROMPT ================================================================

-- Main data load with append hint
INSERT /*+ APPEND PARALLEL({{ target_configuration.parallel_degree }}) NOLOGGING */ 
INTO {{ owner }}.{{ new_table_name }}
(
    {{ column_list }}
)
SELECT {{ target_configuration.parallel_degree | parallel_hint }}
    {{ column_list }}
FROM 
    {{ owner }}.{{ table_name }}
{%- if target_configuration.partition_column %}
ORDER BY 
    {{ target_configuration.partition_column }}  -- Order by partition key for efficient loading
{%- endif %};

-- Record end time and commit
BEGIN
    SELECT TO_CHAR(SYSDATE, 'YYYY-MM-DD HH24:MI:SS') INTO :v_end_time FROM dual;
END;
/

COMMIT;

PROMPT
PROMPT ✓ Data load completed and committed


-- Post-data load validation and statistics
@validation/post_data_load_checks.sql {{ owner }} {{ new_table_name }} {{ table_name }} {{ current_state.row_count }} {{ target_configuration.parallel_degree }}

{%- if target_configuration.partition_type in ['INTERVAL', 'RANGE'] %}


-- Partition distribution summary (generic)
@validation/partition_distribution_summary.sql {{ owner }} {{ new_table_name }} {{ target_configuration.subpartition_type }}

{%- endif %}

-- Re-enable constraints
@validation/enable_constraints.sql {{ owner }} {{ new_table_name }}

-- Final summary
PROMPT
PROMPT ================================================================
PROMPT Step 20 Complete: Data Load SUCCESSFUL
PROMPT ================================================================
PROMPT Status: SUCCESS ✓
PROMPT Source Rows: {{ ':v_source_count' }} (use PRINT v_source_count to see value)
PROMPT Target Rows: {{ ':v_target_count' }} (use PRINT v_target_count to see value)
PROMPT Start Time: {{ ':v_start_time' }}
PROMPT End Time: {{ ':v_end_time' }}
PROMPT
PROMPT Next Steps:
PROMPT   1. Run 30_create_indexes.sql to rebuild indexes
PROMPT   2. Consider running 03_validation/data_comparison.sql
PROMPT   3. Monitor partition growth
PROMPT ================================================================
