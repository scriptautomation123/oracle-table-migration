{#
==================================================================
Template: Create New Interval-Hash Partitioned Table (Jinja2)
==================================================================
Purpose: Creates new table with INTERVAL-HASH partitioning
         Supports both conversion and new partitioning

Context Variables:
  owner                    - Table owner/schema
  table_name              - Original table name  
  new_table_name          - New table name
  target_configuration    - Target partition config dict
    - partition_type      - INTERVAL or RANGE
    - partition_column    - Column to partition on
    - interval_type       - HOUR, DAY, WEEK, MONTH
    - interval_value      - Interval value (e.g., 1)
    - subpartition_type   - HASH or NONE
    - subpartition_column - Column to subpartition on
    - subpartition_count  - Number of hash subpartitions
    - tablespace          - Tablespace name
    - parallel_degree     - Parallel degree
    - initial_partition_value - Initial partition boundary
  column_definitions      - Column definitions string
  lob_columns            - List of LOB columns (if any)
  current_state          - Current table state dict
  migration_action       - Type of migration
==================================================================
#}
-- ==================================================================
-- CREATE TABLE: {{ owner }}.{{ new_table_name }}
-- ==================================================================
-- Generated: {{ generation_date }}
-- Migration Action: {{ migration_action }}
-- Source Table: {{ owner }}.{{ table_name }}
{%- if current_state.is_partitioned %}
-- Current Partitioning: {{ current_state.partition_type }}{% if current_state.is_interval %} (INTERVAL){% endif %}
{%- else %}
-- Current: Non-partitioned table
{%- endif %}
-- Target Partitioning: {{ target_configuration.partition_type }}{% if target_configuration.subpartition_type == 'HASH' %}-{{ target_configuration.subpartition_type }}{% endif %}
-- ==================================================================

SET ECHO ON
SET SERVEROUTPUT ON
SET TIMING ON
SET FEEDBACK ON

PROMPT ================================================================
PROMPT Step 10: Creating New Partitioned Table
PROMPT ================================================================
PROMPT Table: {{ owner }}.{{ new_table_name }}
PROMPT Partitioning: {{ target_configuration.partition_type }}{% if target_configuration.partition_type == 'INTERVAL' %} ({{ target_configuration.interval_type }}){% endif %}
PROMPT Partition Column: {{ target_configuration.partition_column }}
PROMPT Subpartitioning: {% if target_configuration.subpartition_type == 'HASH' %}HASH on {{ target_configuration.subpartition_column }}{% else %}NONE{% endif %}
PROMPT Hash Subpartitions: {% if target_configuration.subpartition_type == 'HASH' %}{{ target_configuration.subpartition_count }}{% endif %}
PROMPT Tablespace: {{ target_configuration.tablespace }}
{% if current_state.lob_count > 0 %}
PROMPT LOB Columns: {{ current_state.lob_count }}
{% endif %}
PROMPT ================================================================

-- Check if table already exists
@plsql-util.sql READONLY check_existence {{ owner }} {{ new_table_name }}

-- Create new table with partitioning
PROMPT

PROMPT Creating table {{ owner }}.{{ new_table_name }}...
PROMPT Estimated time: {{ current_state.size_gb | estimate_time('load') }}



CREATE TABLE "{{ owner }}"."{{ new_table_name }}"
(
{%- for col in columns %}
    {{ col.name }} {{ col.type }}{% if col.type in ['VARCHAR2', 'CHAR', 'NVARCHAR2', 'NCHAR'] and col.char_length %}({{ col.char_length }}){% elif col.type == 'NUMBER' and col.precision %}({{ col.precision }}{% if col.scale is not none %},{{ col.scale }}{% endif %}){% endif %}{% if col.is_identity %} GENERATED {% if col.identity_generation == 'ALWAYS' %}ALWAYS{% else %}BY DEFAULT{% if col.identity_generation == 'BY DEFAULT ON NULL' %} ON NULL{% endif %}{% endif %} AS IDENTITY (START WITH {{ col.identity_start_with }} INCREMENT BY {{ col.identity_increment_by }}{% if col.identity_max_value %} MAXVALUE {{ col.identity_max_value }}{% endif %}{% if col.identity_min_value %} MINVALUE {{ col.identity_min_value }}{% endif %}{% if col.identity_cache_size %} CACHE {{ col.identity_cache_size }}{% else %} NOCACHE{% endif %}{% if col.identity_cycle_flag == 'Y' %} CYCLE{% else %} NOCYCLE{% endif %}{% if col.identity_order_flag == 'Y' %} ORDER{% else %} NOORDER{% endif %}){% elif col.default %} DEFAULT {{ col.default }}{% endif %}{% if col.nullable == 'N' %} NOT NULL{% endif %}{% if not loop.last %},{% endif %}
{%- endfor %}
)
{%- if storage_parameters and storage_parameters.compression and storage_parameters.compression != 'DISABLED' %}
COMPRESS FOR {{ storage_parameters.compress_for | default('OLTP') }}
{%- endif %}
TABLESPACE {{ target_configuration.tablespace }}
{%- if storage_parameters %}
PCTFREE {{ storage_parameters.pct_free if storage_parameters.pct_free else '10' }}
INITRANS {{ storage_parameters.ini_trans if storage_parameters.ini_trans else '1' }}
MAXTRANS {{ storage_parameters.max_trans if storage_parameters.max_trans else '255' }}
STORAGE (
    INITIAL {{ storage_parameters.initial_extent if storage_parameters.initial_extent else '10240M' }}
    NEXT {{ storage_parameters.next_extent if storage_parameters.next_extent else '10240M' }}
    BUFFER_POOL {{ storage_parameters.buffer_pool if storage_parameters.buffer_pool else 'DEFAULT' }}
)
{%- endif %}

{%- if target_configuration.partition_type == 'INTERVAL' or target_configuration.partition_type == 'RANGE' %}
-- Partition the main table data by date, and subpartition by hash
PARTITION BY RANGE ({{ target_configuration.partition_column }})
INTERVAL ({{ target_configuration.interval_type | format_interval(target_configuration.interval_value) }}) -- Create a new partition for each {{ target_configuration.interval_type.lower() }}
{%- if target_configuration.subpartition_type == 'HASH' %}
SUBPARTITION BY HASH ({{ target_configuration.subpartition_column }}) SUBPARTITIONS {{ target_configuration.subpartition_count }} -- Create {{ target_configuration.subpartition_count }} hash subpartitions per interval partition
{%- endif %}
(
    -- Define the initial, pre-interval partition
    PARTITION p_before_{{ target_configuration.initial_partition_value | replace("TO_DATE('", "") | replace("', 'YYYY-MM-DD')", "") | replace("-", "_") }} VALUES LESS THAN ({{ target_configuration.initial_partition_value }})
    {%- if target_configuration.subpartition_type == 'HASH' and lob_storage and lob_storage | length > 0 %}
    (
        {%- set lob_tablespaces = target_configuration.lob_tablespaces if target_configuration.lob_tablespaces else [] %}
        {%- for i in range(target_configuration.subpartition_count) %}
        SUBPARTITION p_before_{{ target_configuration.initial_partition_value | replace("TO_DATE('", "") | replace("', 'YYYY-MM-DD')", "") | replace("-", "_") }}_s{{ i + 1 }} TABLESPACE {{ target_configuration.tablespace }}
            {%- for lob in lob_storage %}
            LOB ({{ lob.column_name }}) STORE AS SECUREFILE (TABLESPACE {{ lob_tablespaces[i % lob_tablespaces | length] }}){% if not loop.last %},{% endif %}
            {%- endfor %}{% if not loop.last %},{% endif %}
        {%- endfor %}
    )
    {%- endif %}
)
{%- if target_configuration.subpartition_type == 'HASH' and lob_storage and lob_storage | length > 0 %}
-- Subpartition template for all future interval partitions
SUBPARTITION TEMPLATE (
    {%- set lob_tablespaces = target_configuration.lob_tablespaces if target_configuration.lob_tablespaces else [] %}
    {%- for i in range(target_configuration.subpartition_count) %}
    SUBPARTITION s{{ i + 1 }} TABLESPACE {{ target_configuration.tablespace }}
        {%- for lob in lob_storage %}
        LOB ({{ lob.column_name }}) STORE AS SECUREFILE (TABLESPACE {{ lob_tablespaces[i % lob_tablespaces | length] }}){% if not loop.last %},{% endif %}
        {%- endfor %}{% if not loop.last %},{% endif %}
    {%- endfor %}
)
{%- endif %}
{%- endif %}
ENABLE ROW MOVEMENT;

PROMPT âœ“ Table {{ owner }}.{{ new_table_name }} created successfully


-- Post-create table checks (structure, partitioning, LOBs, stats)
@plsql-util.sql WORKFLOW post_create {{ owner }} {{ new_table_name }} {{ target_configuration.parallel_degree }}

PROMPT
PROMPT ================================================================
PROMPT Step 10 Complete: Table Structure Created
PROMPT ================================================================
PROMPT Status: SUCCESS
PROMPT Table: {{ owner }}.{{ new_table_name }}
{%- if target_configuration.partition_type == 'INTERVAL' %}
PROMPT Partitioning: INTERVAL-{% if target_configuration.subpartition_type == 'HASH' %}HASH{% else %}ONLY{% endif %}
{%- endif %}
PROMPT
PROMPT Next Steps:
PROMPT   1. Review table structure above
PROMPT   2. Run 20_data_load.sql to load data (est. {{ current_state.size_gb | estimate_time('load') }})
PROMPT   3. Monitor space and performance
PROMPT ================================================================
